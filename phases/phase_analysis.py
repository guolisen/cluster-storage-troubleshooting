#!/usr/bin/env python3
"""
Phase 1: ReAct Investigation for Kubernetes Volume Troubleshooting

This module contains the implementation of Phase 1 (ReAct Investigation)
which actively investigates using tools with pre-collected data as base knowledge.
"""

import logging
import asyncio
from typing import Dict, List, Any, Optional, Tuple
from rich.console import Console
from rich.panel import Panel
from langgraph.graph import StateGraph

from troubleshooting.graph import create_troubleshooting_graph_with_context
from tools.diagnostics.hardware import xfs_repair_check  # Importing the xfs_repair_check tool
from phases.utils import format_historical_experiences_from_collected_info, handle_exception

logger = logging.getLogger(__name__)

class AnalysisPhase:
    """
    Implementation of Phase 1: ReAct Investigation
    
    This class handles the active investigation of volume I/O errors
    using the Investigation Plan and pre-collected data.
    """
    
    def __init__(self, collected_info: Dict[str, Any], config_data: Dict[str, Any]):
        """
        Initialize the Analysis Phase
        
        Args:
            collected_info: Pre-collected diagnostic information from Phase 0
            config_data: Configuration data for the system
        """
        self.collected_info = collected_info
        self.config_data = config_data
        self.logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")
        self.console = Console()
    
    def _extract_final_message(self, response: Dict[str, Any]) -> str:
        """
        Extract the final message from a graph response
        
        Args:
            response: Response from the graph
            
        Returns:
            str: Final message content
        """
        if not response.get("messages"):
            return "Failed to generate analysis results"
            
        if isinstance(response["messages"], list):
            return response["messages"][-1].content
        else:
            return response["messages"].content
    
    async def run_investigation(self, pod_name: str, namespace: str, volume_path: str, 
                               investigation_plan: str, message_list: List[Dict[str, str]] = None) -> Tuple[str, List[Dict[str, str]]]:
        """
        Run the investigation based on the Investigation Plan
        
        Args:
            pod_name: Name of the pod with the error
            namespace: Namespace of the pod
            volume_path: Path of the volume with I/O error
            investigation_plan: Investigation Plan generated by the Plan Phase
            message_list: Optional message list for chat mode
            
        Returns:
            Tuple[str, List[Dict[str, str]]]: (Analysis result, Updated message list)
        """
        try:
            # Initialize message list if not provided
            if message_list is None:
                # System prompt for Phase1
                system_prompt = """You are an expert Kubernetes storage troubleshooter. Your task is to investigate volume I/O errors in Kubernetes pods and generate a comprehensive Fix Plan.

TASK:
1. Execute the Investigation Plan to identify the root cause of volume I/O errors
2. Analyze the results of the investigation
3. Generate a comprehensive Fix Plan to resolve the identified issues

KNOWLEDGE GRAPH TOOLS USAGE:
- When using knowledge graph tools, use the parameters of entity_type and id format:
  * Entity ID formats:
    - Pod: "gnode:Pod:<namespace>/<name>" (example: "gnode:Pod:default/test-pod-1-0")
    - PVC: "gnode:PVC:<namespace>/<name>" (example: "gnode:PVC:default/test-pvc-1")
    - PV: "gnode:PV:<name>" (example: "gnode:PV:pv-test-123")
    - Drive: "gnode:Drive:<uuid>" (example: "gnode:Drive:a1b2c3d4-e5f6")
    - Node: "gnode:Node:<name>" (example: "gnode:Node:kind-control-plane")
    - StorageClass: "gnode:StorageClass:<name>" (example: "gnode:StorageClass:csi-baremetal-sc")
    - LVG: "gnode:LVG:<name>" (example: "gnode:LVG:lvg-1")
    - AC: "gnode:AC:<name>" (example: "gnode:AC:ac-node1-ssd")
    - Volume: "gnode:Volume:<namespace>/<name>" (example: "gnode:Volume:default/vol-1")
    - System: "gnode:System:<entity_name>" (example: "gnode:System:kernel")
    - ClusterNode: "gnode:ClusterNode:<name>" (example: "gnode:ClusterNode:worker-1")
    - HistoricalExperience: "gnode:HistoricalExperience:<experience_id>" (example: "gnode:HistoricalExperience:exp-001")

- Start with discovery tools to understand what's in the Knowledge Graph:
  * Use kg_list_entity_types() to discover available entity types and their counts
  * Use kg_list_entities(entity_type) to find specific entities of a given type
  * Use kg_list_relationship_types() to understand how entities are related

- Then use detailed query tools:
  * Use kg_get_entity_info(entity_type, id) to retrieve detailed information about specific entities
  * Use kg_get_related_entities(entity_type, id) to understand relationships between components
  * Use kg_get_all_issues() to find already detected issues in the system
  * Use kg_find_path(source_entity_type, source_id, target_entity_type, target_id) to trace dependencies

CONSTRAINTS:
- Follow the Investigation Plan step by step
- Use only the tools available in the Phase1 tool registry
- Provide a detailed root cause analysis
- Generate a clear, actionable Fix Plan

OUTPUT FORMAT:
Your response must include:
1. Summary of Findings
2. Detailed Analysis
3. Root Cause
4. Fix Plan
"""
                message_list = [
                    {"role": "system", "content": system_prompt}
                ]
            
            # Create troubleshooting graph with pre-collected context
            graph = create_troubleshooting_graph_with_context(
                self.collected_info, phase="phase1", config_data=self.config_data
            )
            
            # Extract and format historical experience data from collected_info
            historical_experiences_formatted = format_historical_experiences_from_collected_info(self.collected_info)
            
            # Add investigation results to message list if not already present
            if len(message_list) == 1:  # Only system prompt exists
                message_list.append({"role": "assistant", "content": "Investigation Results:\n" + investigation_plan})
            
            # Updated query message with dynamic data for LangGraph workflow
            query = f"""Phase 1 - ReAct Investigation: Execute the Investigation Plan to actively investigate the volume I/O error in pod {pod_name} in namespace {namespace} at volume path {volume_path}.

INVESTIGATION PLAN TO FOLLOW:
{investigation_plan}

HISTORICAL EXPERIENCE:
{historical_experiences_formatted}

SPECIAL CASE DETECTION:
After executing the Investigation Plan, you must determine if one of these special cases applies:

CASE 1 - NO ISSUES DETECTED:
If the Knowledge Graph and Investigation Plan execution confirm the system has no issues:
- Output a structured summary in the following format:
  ```
  Summary Finding: No issues detected in the system.
  Evidence: [Details from Knowledge Graph queries, e.g., no error logs found, all services operational]
  Advice: [Recommendations, e.g., continue monitoring the system]
  SKIP_PHASE2: YES
  ```

CASE 2 - MANUAL INTERVENTION REQUIRED:
If the Knowledge Graph and Investigation Plan execution confirm the issue cannot be fixed automatically:
- Output a structured summary in the following format:
  ```
  Summary Finding: Issue detected, but requires manual intervention.
  Evidence: [Details from Knowledge Graph queries, e.g., specific error or configuration requiring human action]
  Advice: [Detailed step-by-step instructions for manual resolution, e.g., specific commands or actions for the user]
  SKIP_PHASE2: YES
  ```

CASE 3 - AUTOMATIC FIX POSSIBLE:
If the issue can be resolved automatically:
- Generate a fix plan based on the Investigation Plan's results
- Output a comprehensive root cause analysis and fix plan
- Do NOT include the SKIP_PHASE2 marker

<<< Note >>>: Please provide the root cause and fix plan analysis within 30 tool calls.
"""
            # Set timeout
            timeout_seconds = self.config_data['troubleshoot']['timeout_seconds']
            
            # Run analysis using the tools module
            formatted_query = {"messages": [{"role": "user", "content": query}]}
            
            # First show the analysis panel
            self.console.print(Panel(
                "[yellow]Starting analysis with LangGraph...\nThis may take a few minutes to complete.", 
                title="[bold blue]Analysis Phase",
                border_style="blue"
            ))
            
            # Run graph with timeout
            try:
                response = await asyncio.wait_for(
                    graph.ainvoke(formatted_query, config={"recursion_limit": 100}),
                    timeout=timeout_seconds
                )
                self.console.print("[green]Analysis complete![/green]")
            except asyncio.TimeoutError:
                self.console.print("[red]Analysis timed out![/red]")
                raise
            except Exception as e:
                self.console.print(f"[red]Analysis failed: {str(e)}[/red]")
                raise
            
            # Extract analysis results
            final_message = self._extract_final_message(response)
            
            # Add fix plan to message list
            message_list.append({"role": "assistant", "content": final_message})
            
            return final_message, message_list

        except Exception as e:
            error_msg = handle_exception("run_investigation", e, self.logger)
            
            # Add error message to message list if provided
            if message_list is not None:
                message_list.append({"role": "assistant", "content": error_msg})
            
            return error_msg, message_list


async def run_analysis_phase_with_plan(pod_name: str, namespace: str, volume_path: str, 
                                     collected_info: Dict[str, Any], investigation_plan: str,
                                     config_data: Dict[str, Any], message_list: List[Dict[str, str]] = None) -> Tuple[str, bool, List[Dict[str, str]]]:
    """
    Run Phase 1: ReAct Investigation with pre-collected information as base knowledge
    
    Args:
        pod_name: Name of the pod with the error
        namespace: Namespace of the pod
        volume_path: Path of the volume with I/O error
        collected_info: Pre-collected diagnostic information from Phase 0
        investigation_plan: Investigation Plan generated by the Plan Phase
        config_data: Configuration data
        message_list: Optional message list for chat mode
        
    Returns:
        Tuple[str, bool, List[Dict[str, str]]]: (Analysis result, Skip Phase2 flag, Updated message list)
    """
    logging.info("Starting Phase 1: ReAct Investigation with Plan")
    
    console = Console()
    console.print("\n")
    console.print(Panel(
        "[bold white]Executing Investigation Plan to actively investigate volume I/O issue...",
        title="[bold magenta]PHASE 1: REACT INVESTIGATION WITH PLAN",
        border_style="magenta",
        padding=(1, 2)
    ))
    
    try:
        # Initialize the analysis phase
        phase = AnalysisPhase(collected_info, config_data)
        
        # Run the investigation
        result, message_list = await phase.run_investigation(pod_name, namespace, volume_path, investigation_plan, message_list)
        
        # Process the result
        return process_analysis_result(result, message_list)
    
    except Exception as e:
        error_msg = handle_exception("run_analysis_phase_with_plan", e, logger)
        
        # Add error message to message list if provided
        if message_list is not None:
            message_list.append({"role": "assistant", "content": error_msg})
        
        return error_msg, False, message_list

def process_analysis_result(result: str, message_list: List[Dict[str, str]]) -> Tuple[str, bool, List[Dict[str, str]]]:
    """
    Process the analysis result to check for SKIP_PHASE2 marker
    
    Args:
        result: Analysis result
        message_list: Message list for chat mode
        
    Returns:
        Tuple[str, bool, List[Dict[str, str]]]: (Processed result, Skip Phase2 flag, Message list)
    """
    # Check if the result contains the SKIP_PHASE2 marker
    skip_phase2 = "SKIP_PHASE2: YES" in result
    
    # Remove the SKIP_PHASE2 marker from the output if present
    if skip_phase2:
        result = result.replace("SKIP_PHASE2: YES", "").strip()
        logging.info("Phase 1 indicated Phase 2 should be skipped")
    
    return result, skip_phase2, message_list
